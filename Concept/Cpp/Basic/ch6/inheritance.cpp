//하위 클래스는 상위 클래스의 생성자를 호출하는 형태로 상위 클래스의 맴베를 초기화하는게 좋다.
//이니셜라이저를 이용해서 상위 클래스의 생성자를 호출하여 초기화할수있따.

//상위 클래스 = 기초 클래스
//하위 클래스 = 유도 클래스

//상속이 이뤄져도 private 부분은 하위클래스에서 잡근불가 따라서 함수를 통해서 간접적으로 접근해야됨

//상위 객체가 먼저 생성되고 하위 객체가 생성됨
//따라서 소멸될때는 하위객제가 소멸하고 그다음 상위 객체가 소멸함

//상속 관계를 할때는 
//is-a 관계만 그렇게 쓸것
//has-a 관계도 가능하지만 앵간하면 맴버변수로 설정하여 쓰도록

class Person {

};

class Student : public Person {

};

Student *ptr = new Student();
Person *ptr = new Student();

//이렇게 Person 을 직/간잡적으로 상속하는 모든 걕체를 가리킬 수 있다. (객체의 주소 값을 저장할 수 있다.)
//오버라이딩된 기초클래스의 함수를 호출가능 객체이름::함수이름 을 통해서 ㅇㅇ 


//Base *bptr = new Derived()
//이렇게하면 Derived객체안에서 Base 부분만 접근가능
//만약 기초클래스 함수 앞에 virtual 붙이면 해당 함수를 오버라이딩하는 유도클래스의 함수에 접근가능


//virtual int GetPay() const = 0;
//이렇게 뒤에 = 0 붙이면 몸체가 정의되지않은 함수를 뜻함 또한 이게 한개라도 있으면 해당객체는 생성되지 못함 only 상속을 위한 용도로만 씀